// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/jwtmanager/manager.go

// Package mock_manager is a generated GoMock package.
package mock_manager

import (
	reflect "reflect"

	models "github.com/dmitastr/yp_gophermart/internal/domain/models"
	jwt "github.com/golang-jwt/jwt/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// IssueJWT mocks base method.
func (m *MockManager) IssueJWT(arg0 models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueJWT", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueJWT indicates an expected call of IssueJWT.
func (mr *MockManagerMockRecorder) IssueJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueJWT", reflect.TypeOf((*MockManager)(nil).IssueJWT), arg0)
}

// VerifyJWT mocks base method.
func (m *MockManager) VerifyJWT(arg0 string) (jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", arg0)
	ret0, _ := ret[0].(jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockManagerMockRecorder) VerifyJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockManager)(nil).VerifyJWT), arg0)
}
