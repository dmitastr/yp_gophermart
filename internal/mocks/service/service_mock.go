// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\domain\service\service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	models "github.com/dmitastr/yp_gophermart/internal/domain/models"
	gophermartservice "github.com/dmitastr/yp_gophermart/internal/domain/service/gophermartservice"
	jwt "github.com/golang-jwt/jwt/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetBalance mocks base method.
func (m *MockService) GetBalance(arg0 context.Context, arg1 string) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", arg0, arg1)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockServiceMockRecorder) GetBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockService)(nil).GetBalance), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockService) GetOrders(arg0 context.Context, arg1 string) ([]models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].([]models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockServiceMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockService)(nil).GetOrders), arg0, arg1)
}

// GetWithdrawals mocks base method.
func (m *MockService) GetWithdrawals(arg0 context.Context, arg1 string) ([]models.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", arg0, arg1)
	ret0, _ := ret[0].([]models.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockServiceMockRecorder) GetWithdrawals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockService)(nil).GetWithdrawals), arg0, arg1)
}

// IssueJWT mocks base method.
func (m *MockService) IssueJWT(arg0 models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueJWT", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueJWT indicates an expected call of IssueJWT.
func (mr *MockServiceMockRecorder) IssueJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueJWT", reflect.TypeOf((*MockService)(nil).IssueJWT), arg0)
}

// LoginUser mocks base method.
func (m *MockService) LoginUser(arg0 context.Context, arg1 models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockServiceMockRecorder) LoginUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockService)(nil).LoginUser), arg0, arg1)
}

// PostOrder mocks base method.
func (m *MockService) PostOrder(arg0 context.Context, arg1 *models.Order) (*gophermartservice.WorkerResult, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostOrder", arg0, arg1)
	ret0, _ := ret[0].(*gophermartservice.WorkerResult)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// PostOrder indicates an expected call of PostOrder.
func (mr *MockServiceMockRecorder) PostOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostOrder", reflect.TypeOf((*MockService)(nil).PostOrder), arg0, arg1)
}

// PostWithdraw mocks base method.
func (m *MockService) PostWithdraw(arg0 context.Context, arg1 *models.Withdraw) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostWithdraw", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostWithdraw indicates an expected call of PostWithdraw.
func (mr *MockServiceMockRecorder) PostWithdraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostWithdraw", reflect.TypeOf((*MockService)(nil).PostWithdraw), arg0, arg1)
}

// RegisterUser mocks base method.
func (m *MockService) RegisterUser(arg0 context.Context, arg1 models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockServiceMockRecorder) RegisterUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockService)(nil).RegisterUser), arg0, arg1)
}

// VerifyJWT mocks base method.
func (m *MockService) VerifyJWT(arg0 string) (jwt.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", arg0)
	ret0, _ := ret[0].(jwt.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockServiceMockRecorder) VerifyJWT(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockService)(nil).VerifyJWT), arg0)
}
