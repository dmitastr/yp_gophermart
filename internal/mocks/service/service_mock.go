// Code generated by MockGen. DO NOT EDIT.
// Source: .\internal\domain\service\service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	"reflect"

	"github.com/dmitastr/yp_gophermart/internal/domain/models"
	v5 "github.com/golang-jwt/jwt/v5"
	"github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// IssueJWT mocks base method.
func (m *MockService) IssueJWT(user models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueJWT", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueJWT indicates an expected call of IssueJWT.
func (mr *MockServiceMockRecorder) IssueJWT(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueJWT", reflect.TypeOf((*MockService)(nil).IssueJWT), user)
}

// LoginUser mocks base method.
func (m *MockService) LoginUser(user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockServiceMockRecorder) LoginUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockService)(nil).LoginUser), user)
}

// RegisterUser mocks base method.
func (m *MockService) RegisterUser(user models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockServiceMockRecorder) RegisterUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockService)(nil).RegisterUser), user)
}

// VerifyJWT mocks base method.
func (m *MockService) VerifyJWT(token string) (v5.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyJWT", token)
	ret0, _ := ret[0].(v5.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyJWT indicates an expected call of VerifyJWT.
func (mr *MockServiceMockRecorder) VerifyJWT(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyJWT", reflect.TypeOf((*MockService)(nil).VerifyJWT), token)
}
